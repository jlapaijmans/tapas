---
title: Appendix A2 -- Advanced read generation
---

This more verbose but also more flexible way of generating artificial 
reads is currently needed for example if you want to 

 * Use customised base quality strings in the output FASTQ file
 * Apply alterations to the nucleotide string which also affect
   the read quality string, like insertions or deletion (indels)

The output FASTQ file will be constructed by interleaving the contents
of three files, containing the read names, the nucleotide strings and
the quality strings, respectively. These files will be generated in
the following.

Additionally, a table containing the read names with the true read
positions will be created, to evaluate later on whether a read was
mapped correctly.

This manual shows an example, arbitrary custom manipulation steps
can be performed in between or instead these steps.

Create the subfolder which holds the generated files:

```{.sh}
mkdir data/2e
```

Generate nucleotide strings and read names
------------------------------------------

The `uniform` script can be used to sample reads from a reference
genome. The command is used like already explained in the 
chapter about [simplified read generation](02_read-generation.html).
The difference is that in this case it is called with the `--output`
switch instead of `--output-fastq`. 

The resulting output will be a raw list of nucleotide sequences and a
table containing three columns:

 1. The FASTA record name (e.g. chromosome) where the read originated.
 2. 1-based base number of the reads' first base.
 3. 1-based base number of the reads' last base.

Example: Extract 25 reads, with minimum length 20 basepairs, where
half of the reads have a length longer than 25 bp. The value 1234
is used to initialize the random number generator. To obtain a
reproducable output, this parameter can be used with an arbitrary
integer. If omitted, different reads are produced on every call.

We will generate sample reads from our `volpertinger` sample genome.
Execute the following script to generate random nucleotide sequences:

```{.sh}
scripts/uniform input/genome/volpertinger.fasta \
    --seed 1234 \
    --output data/2e/volpertinger.coord data/2e/volpertinger.nucl \
    25 20 5 
```

Two files are generated. The first file `volpertinger.coord` holds 
the read names and coordinates. It looks like this:

```{.sh}
head data/2e/volpertinger.coord | column -t
```
The second file `volpertinger.nucl` holds the raw nucleotide
sequences. Below its first lines are shown:

```{.sh}
head data/2e/volpertinger.nucl
```

If the `--output` switch is omitted, all those information is printed 
in tabular form on the standard output and not saved to distinct files.
This enables to input the whole output generated by the `uniform` tool
into a custom program for manipulation. 

Putting together the FASTQ file
-------------------------------

This task needs three input files: 

  1. The list of read names
  2. The list of nucleotide strings 
  3. The list of quality strings

The first list is extracted from the file `volpertinger.coord`, the second
list exists already (`volpertinger.nucl`) and the third list is generated
using standard UNIX tools from the nucleotide strings.

Insertions and deletions (indels)
---------------------------------

TAPAS contains a tool, called `indel`, which can insert and delete
nucleotides randomly. The tool outputs the mutated nucleotide
sequences along with a CIGAR string which describes which operation
had been taken. It expects as input the list of nucleotides. Below is
an example call with the nucleotides created above

```{.sh}
scripts/indel --in-prob 0.01 --in-exp 0.1 \
              --no-header --cigar-new \
              --seed 112233 \
    < data/2e/volpertinger.nucl \
    > data/2e/volpertinger.indel

head data/2e/volpertinger.indel | column -t
```

The output must be split: The mutated nucleotide strings must go into
an own file, to be converted into a FASTQ file in the next step. The
CIGAR strings are added to the `volpertinger.coord` file as a new
column. If this second step is performed, the CIGAR string is added to
the true read position information and can later be compared to the
CIGAR strings determined by the short read mapper.

Overwrite the `volpertinger.nucl` file with the new, mutated version.
Of course, you can also use new file names and not overwrite the file.

```{.sh}
awk '{print $1}' < data/2e/volpertinger.indel \
                 > data/2e/volpertinger.nucl
```

Add the CIGAR strings to the `volpertinger.coord` file as a new
column. The last line (`&& ...`) is used to update the input file with
the new information (specifying the same file both as input and output
fil in bash does not work easily because it leads to deletion of the 
content of the respective file most of the time). Therefore, a
temporary file (`volper(...).tmp`) is used as an intermediary storage. 

```{.sh}
paste data/2e/volpertinger.coord \
      <(echo "cigar"; awk '{print $2}' data/2e/volpertinger.indel) \
      > data/2e/volpertinger.coord.tmp \
  && mv data/2e/volpertinger.coord{.tmp,}
```

Show the result:
```{.sh}
head data/2e/volpertinger.coord | column -t
```

Read names
----------

In this tutorial we generate read names consisting of the organism
name (*volpertinger*) followed by an underscore and a counting number.

To have the origin information of the reads available along with their
newly-generated reads, it is advisable to add the read names to the
`volpertinger.coord` file generated above.

There is a script included for adding this kind of column, which is
shown in the next code example. You can as well use `awk` or whichever
tool you like to accomplish this task if you need more sophisticated
read names. 

```{.sh}
scripts/index_column  --prefix volpertinger_ \
                      --colname name  \
                      --inplace data/2e/volpertinger.coord

head data/2e/volpertinger.coord | column -t
```

To use the read names to generate a FASTQ file, they must be available
as a raw list without additional columns or a header. `awk` can be
used to perform this task:

```{.sh}
awk '(NR!=1){print $1}' \
      data/2e/volpertinger.coord \
    > data/2e/volpertinger.i

head data/2e/volpertinger.i
```

Quality strings
---------------

Currently, the effect of quality strings on the mapping result has not
been investigated. Currently only strings of constant quality score
are used. This can be done by the UNIX `sed` tool, which replaces every 
character by an F:

```{.sh}
sed 's/./F/g' \
      data/2e/volpertinger.nucl \
    > data/2e/volpertinger.q

head data/2e/volpertinger.q
```

If you want to generate more elaborate quality strings, you are free
to do so using whichever tools you desire. Just generate a list with as
many lines as there are nucleotide strings in `volpertinger.nucl` to input them 
into the pipeline.

Putting the FASTQ file together
-------------------------------

The `synth_fastq` tool creates a FASTQ file from its components,
nucleotide string, quality string and read name (ID line). If the file
containing the read lines is omitted, the reads are numbered
sequentially.

```{.sh}
scripts/synth_fastq data/2e/volpertinger.nucl \
                    data/2e/volpertinger.q    \
                    data/2e/volpertinger.i    \
    > data/2e/volpertinger.fastq

head data/2e/volpertinger.fastq
```

Repeat the above steps to generate contaminant reads
----------------------------------------------------

This commands generate some reads from a truncated *Rhizobium etli*
genome, to supply reads which are not supposed to map. This way,
contamination with non-endogenous reads are simulated.

The endogenous (`volpertinger.fastq`) and contaminant (`retli.fastq`) 
read will be merged into one fastq file (`all.fastq`) once the
sample reads have undergone mutation simulation. This will be 
done in the next section.

Note that two kinds of abbreviations are used here:

 *  Terms like `const_{a,b,c}` are expanded by `bash` to `const_a
    const_b const_c` and can therefore be used to specify mulitple
    paths which share some parts. 
 *  The temporary files (similar to `volpertinger.q` and `volpertinger.i` 
    above) are omitted here by using `bash`'s *process substitution*
    (`<(...)`) which uses the output of one argument instead of a file
    name which the other command expects.

If you do not understand why these commands are equivalent to the
commands listed above used to generate `reads.fastq`, you can use
those as well without problems.

Index genome and sample nucleotide seqences:
```{.sh}
samtools faidx input/retli/retli_tr.fasta

scripts/uniform \
    input/retli/retli_tr.fasta \
    --seed 2345 \
    --output data/2e/retli.{coord,nucl} \
    25 20 5 
```

Read names:

```{.sh}
scripts/index_column  --prefix retli_ \
                      --colname name  \
                      --inplace data/2e/retli.coord
```

Put the FASTQ together:

 * Quality strings are generated without an intermediate file using 
   `sed`
 * Read names are extracted without an intermediate file using `awk`


```{.sh}
scripts/synth_fastq \
    data/2e/retli.nucl \
    <(sed 's/./F/g'           data/2e/retli.nucl) \
    <(awk '(NR!=1){print $1}' data/2e/retli.coord) \
    > data/2e/retli.fastq

head data/2e/retli.fastq
```



vim:tw=70
